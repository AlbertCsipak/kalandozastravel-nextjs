name: Build & Deploy

on:
    push:
        branches: [main]

jobs:
    e2e-tests:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Cypress run
              uses: cypress-io/github-action@v5
              with:
                  browser: chrome
                  install-command: npm install --force
                  start: npm run dev
                  wait-on: "http://localhost:3000"
              env:
                  NEXT_PUBLIC_GOOGLE_MAPSKEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPSKEY }}
                  NEXT_PUBLIC_EMAIL_USER: ${{ secrets.NEXT_PUBLIC_EMAIL_USER }}
                  NEXT_PUBLIC_EMAIL_PASS: ${{ secrets.NEXT_PUBLIC_EMAIL_PASS }}
                  NEXT_BASEURL: ${{ secrets.NEXT_BASEURL }}
                  NEXT_FIREBASE_API_KEY: ${{ secrets.NEXT_FIREBASE_API_KEY }}
                  NEXT_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_FIREBASE_AUTH_DOMAIN }}
                  NEXT_FIREBASE_PROJECTID: ${{ secrets.NEXT_FIREBASE_PROJECTID }}
                  NEXT_FIREBASE_STORAGEBUCKET: ${{ secrets.NEXT_FIREBASE_STORAGEBUCKET }}
                  NEXT_FIREBASE_MESSAGESENDERID: ${{ secrets.NEXT_FIREBASE_MESSAGESENDERID }}
                  NEXT_FIREBASE_APPID: ${{ secrets.NEXT_FIREBASE_APPID }}
                  NEXT_FIREBASE_MEASUREMENTID: ${{ secrets.NEXT_FIREBASE_MEASUREMENTID }}
                  NEXT_PUBLIC_GOOGLE_GAID: ${{ secrets.NEXT_PUBLIC_GOOGLE_GAID }}
    build:
        needs: e2e-tests
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
            packages: write
        steps:
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::574681690878:role/githubRole
                  aws-region: eu-central-1
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
            - name: Build and push
              uses: docker/build-push-action@v3
              with:
                  push: true
                  platforms: linux/arm64
                  tags: ${{ steps.login-ecr.outputs.registry }}/kalandozas:latest
                  build-args: |
                      NEXT_PUBLIC_GOOGLE_MAPSKEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPSKEY }}
                      NEXT_PUBLIC_EMAIL_USER=${{ secrets.NEXT_PUBLIC_EMAIL_USER }}
                      NEXT_PUBLIC_EMAIL_PASS=${{ secrets.NEXT_PUBLIC_EMAIL_PASS }}
                      NEXT_BASEURL=${{ secrets.NEXT_BASEURL }}
                      NEXT_FIREBASE_API_KEY=${{ secrets.NEXT_FIREBASE_API_KEY }}
                      NEXT_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_FIREBASE_AUTH_DOMAIN }}
                      NEXT_FIREBASE_PROJECTID=${{ secrets.NEXT_FIREBASE_PROJECTID }}
                      NEXT_FIREBASE_STORAGEBUCKET=${{ secrets.NEXT_FIREBASE_STORAGEBUCKET }}
                      NEXT_FIREBASE_MESSAGESENDERID=${{ secrets.NEXT_FIREBASE_MESSAGESENDERID }}
                      NEXT_FIREBASE_APPID=${{ secrets.NEXT_FIREBASE_APPID }}
                      NEXT_FIREBASE_MEASUREMENTID=${{ secrets.NEXT_FIREBASE_MEASUREMENTID }}
                      NEXT_PUBLIC_GOOGLE_GAID=${{ secrets.NEXT_PUBLIC_GOOGLE_GAID }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    deploy:
        needs: build
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
            packages: write
        steps:
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::574681690878:role/kalandozascdn
                  aws-region: eu-central-1
            - name: Checkout
              uses: actions/checkout@v3
            - name: Deploy dashboard to bucket
              run: aws s3 sync ./public/img s3://${{ secrets.S3_BUCKET }}/img/
            - name: Invalidate dashboard cloudfront
              run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/img/*"
            - name: Deploy app
              uses: appleboy/ssh-action@v0.1.2
              with:
                  host: ${{secrets.SSH_HOST}}
                  key: ${{secrets.SSH_KEY}}
                  username: ${{secrets.SSH_USERNAME}}

                  script: |
                      cd /home/github
                      cd kalandozas
                      git pull
                      docker compose pull kalandozastravel
                      docker compose up -d
